:root {
	--clr-accent: #e78a4e;
	--clr-sys: #d8a654;
	--clr-error: #e72b2b;
	--clr-error-bg: #e72b2b22;
	--clr-background: #181818;
	--clr-foreground: #282828;
	--clr-text: #e6cda3;
	--clr-text-disabled: #e6cda355;
	--clr-text-select: #606060;

	--clr-settings-declaration: var(--clr-accent);
	--clr-settings-bracket: #a9b665;
	--clr-settings-property: var(--clr-text);
	--clr-settings-quote: var(--clr-sys);
	--clr-settings-text: var(--clr-sys);
	--clr-settings-variable: var(--clr-text);
	--clr-settings-special: #e6cda399;
	--clr-settings-number: #d3869b;
	--clr-settings-boolean: #d3869b;

	/* --clr-msg-to-send: var(--clr-text); */

	--fs-small: 0.65rem;

	--line-height: 1em;

	font-family: consolas, Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
	font-weight: 400;

	--max-width: calc(100dvh * 4 / 3);
	--min-width: min(100vw, (calc(100dvh * 2 / 3)));
	font-size: calc(var(--min-width) / 35);

	background: var(--clr-background);
	color: var(--clr-text);
}

::selection {
	background: var(--clr-text-select);
	color: inherit;
}

::-webkit-scrollbar {
	width: 0.0625rem;
	height: 0.0625rem;
}
::-webkit-scrollbar-thumb {
	background: var(--clr-accent);
}
html:not(.is-mobile) *:not(:hover) {
	-ms-overflow-style: -ms-autohiding-scrollbar;
	scrollbar-width: none;
}
html:not(.is-mobile) *:not(:hover)::-webkit-scrollbar {
	display: none;
}

* {
	line-height: var(--line-height) !important;
}
*:not(.actor-portrait) {
	border-radius: 0 !important;
}

html {
	position: relative;
}

body {
	max-width: var(--max-width);
	min-width: var(--min-width);
	overflow: hidden;
	margin: 0 auto;
}

div {
	width: 100%;
	/* height: 100%; */
	/* padding: 0.25rem; */
}

small,
.small {
	font-size: var(--fs-small);
	color: var(--clr-sys);
	line-height: 1.2;
}

em {
	/* color: var(--clr-sys); */
}

#app {
	display: flex;
	flex-direction: column;
	align-items: center;
	justify-content: space-between;
	overflow: hidden;
	/* height: 100vh; */
	height: 100dvh;
	width: var(--width);
	max-width: var(--width);
	margin: 0 auto;
	padding: 1rem 0.5rem;
}
#app {
	background-color: var(--clr-background);
}
#app * {
	background-color: inherit;
}

button {
	border: 0.125rem solid var(--clr-foreground);
	/* background: var(--clr-background) !important; */
	outline: none;
	/* border-radius: 0.25rem; */
	padding: 0.5rem 1rem;
	cursor: pointer;
	transition: background 0.1s, color 0.1s;
	width: 100%;
	white-space: nowrap;
}

button:hover {
	/* background: var(--clr-accent); */
	/* color: var(--clr-foreground); */
	color: var(--clr-accent);
}

button.delete {
	color: var(--clr-error) !important;
}
button.delete:hover {
	border-color: var(--clr-error);
}

button:disabled {
	pointer-events: none;
	color: var(--clr-text-disabled);
	/* opacity: 0.5; */
}

form {
	display: flex;
	flex-direction: column;
	align-items: center;
}

form > * {
	margin: 0.25rem 0;
}

form > .form-control-message {
	margin-top: 0;
}
form > *:has(+ .form-control-message) {
	margin-bottom: 0;
	padding-bottom: 0;
	z-index: 2;
}

input {
	background: var(--clr-foreground) !important;
	/* background: inherit; */
	color: var(--clr-text);
	border-radius: 0.5rem;
	padding: 0.5rem;
	width: 100%;
	cursor: text;
	transition: outline 0.1s;
	outline: none;
	border: 0.0625rem solid var(--clr-background);
}

input[type='file']::file-selector-button {
	background-color: var(--clr-foreground) !important;
}

input:focus {
	border: 0.0625rem solid var(--clr-accent);
}

input:has(+ button) {
	border-right: none !important;
	border-top-right-radius: 0;
	border-bottom-right-radius: 0;
}
input + button {
	flex: 1;
}

input[type='checkbox'] {
	appearance: none;
	position: relative;
	cursor: pointer;
	z-index: 0;
	width: 0.8rem !important;
	height: 0.8rem !important;
	margin-left: 1ch;
}

input[type='checkbox']::before {
	content: '';
	position: absolute;
	top: -21%;
	left: -40%;
	height: 150%;
	width: 150%;
	border: 0.0625rem solid var(--clr-settings-boolean);
	background-color: var(--clr-foreground) !important;
	z-index: 1;
}
input[type='checkbox']:checked::after {
	content: '';
	position: absolute;
	top: 5%;
	left: 15%;
	height: 80%;
	width: 40%;
	background-color: transparent !important;
	z-index: 2;
	border: solid var(--clr-settings-boolean);
	-webkit-transform: rotate(45deg);
	-ms-transform: rotate(45deg);
	transform: rotate(45deg);
	border-width: 0 0.125rem 0.125rem 0;
}
input[type='checkbox']:focus::before,
input[type='checkbox']:focus::after {
	border-color: var(--clr-accent) !important;
}
input[type='checkbox']:focus::before {
	border-width: 0.125rem;
}

label:has(input):has(.select, .multiselect),
label:has(
		.select,
		.multiselect,
		+ :is(input, .select, .multiselect),
		+ * + .select,
		+ * + .multiselect
	) {
	cursor: pointer !important;

	& * {
		cursor: pointer !important;
	}
}
input[readonly],
label:has(input[readonly]):not(:has(.select, .multiselect):not(.readonly)),
label:has(
		.select.readonly,
		.multiselect.readonly,
		+ :is(input[readonly], .select.readonly, .multiselect.readonly),
		+ * + .select.readonly,
		+ * + .multiselect.readonly
	) {
	cursor: default !important;
	pointer-events: none;

	& * {
		cursor: default !important;
		pointer-events: none !important;
	}
	& + input[readonly] {
		cursor: default !important;
		pointer-events: none !important;
	}
}

[class='placeholder'] {
	display: flex;
	justify-content: center;
	align-items: center;
	opacity: 0.6;
	color: var(--clr-accent);
	cursor: default;
	user-select: none;
	height: 100%;
	width: 100%;
}

.header {
	align-self: flex-end;
}
.footer {
	align-self: center;
}

.header,
.footer {
	width: fit-content;
	color: var(--clr-text-disabled);
	font-size: 0.75rem;
}

.form-control-message {
	width: fit-content;
	flex: 1;
	font-size: 0.75rem;
	border-bottom-right-radius: 0.5rem;
	border-bottom-left-radius: 0.5rem;
	border-top: none !important;
	padding: 0.25rem 0.5rem;
	padding-top: 0.5rem;
	/* margin: 0 0.25rem !important; */
	transform: translateY(-0.5rem);
	z-index: 1;
	align-self: flex-start;
}
.error {
	color: var(--clr-error);
	border: 0.0625rem solid var(--clr-error);
}

.editable {
	cursor: pointer;
}

.row {
	display: flex;
	flex-direction: row;
	/* background: transparent !important; */
}

.col {
	display: flex;
	flex-direction: column;
}

.mb-1 {
	margin-bottom: 0.25rem;
}

.mb-2 {
	margin-bottom: 0.5rem;
}

.b-none {
	border: none;
}

.b-l-none {
	border-left: none;
}

.b-r-none {
	border-right: none !important;
}

.br-r-none {
	border-top-right-radius: 0;
	border-bottom-right-radius: 0;
}

.br-l-none {
	border-top-left-radius: 0;
	border-bottom-left-radius: 0;
}
.flex {
	flex: 1;
	height: 0; // overflows break w/o this
}
.hidden {
	overflow: hidden;
}

.home {
	font-size: 1.25rem;
}

#portal {
	z-index: 10000;
}

#actor-settings > label {
	margin-bottom: 0.33rem;
}

[role$='-slave'] {
	visibility: hidden;
	position: absolute;
	top: -100%;
	left: -100%;
}

input.inline {
	outline: none !important;
	border: none !important;
	padding: 0;
	color: inherit;
	width: min-content;
}

#modal-container {
	display: flex;
	position: absolute;
	top: 0;
	left: 0;
	right: 0;
	bottom: 0;
	z-index: 1000000;
	pointer-events: painted;
}
#modal {
	margin: auto;
	width: max-content;
	display: flex;
	flex-direction: column;
	align-items: center;
	justify-content: center;
	padding: 1rem;
	background-color: var(--clr-background);
	border: 0.125rem solid var(--clr-accent);
	font-size: 1.5rem;
	max-width: 80%;
}
#modal form {
	margin-top: 1.4rem;
}
#modal h2 {
	text-align: center;
}
#modal small {
	font-size: 0.85rem;
}
#modal:is(.alert, .modal-error) small {
	color: var(--clr-error) !important;
}
#modal .messages {
	display: flex;
	flex-direction: column;
	justify-content: center;
	align-items: center;
}
#modal .messages :first-child {	
	margin-bottom: 0.5rem;
}
#modal .buttons {
	display: flex;
	justify-content: space-between;
	margin-top: 1.5rem;
}
#modal .buttons button {
	/* width: 48%; */
	background-color: var(--clr-background);
	border: 0.125rem solid var(--clr-foreground);
}
#modal .buttons button:first-child {
	margin-right: 1rem;
}
#modal .buttons button:hover {
	color: var(--clr-accent);
}
#modal:is(.warning, .alert) button[type='submit']:hover {
	color: var(--clr-error);
	border-color: var(--clr-error);
}
#modal-container:has(#modal:empty) {
	display: none;
}

*:has(> .select) {
	width: fit-content;
}
.select,
.multiselect {
	position: relative;
	width: 100%;
	height: min-content;
	/* min-height: 1rem; */
	display: flex;
	background-color: var(--clr-foreground) !important;
	/* border: 0.125rem solid var(--clr-foreground); */
	padding-top: 0.25rem;
	padding-left: 0.25rem;
	border-radius: 10px;
}
.multiselect {
	border: 0.0625rem solid transparent;
}
.select {
	width: min-content;
	padding: 0;
	align-items: flex-end;
}

:is(.select, .multiselect).readonly {
	cursor: default;
	pointer-events: none;
}

.multiselect-input {
	width: calc(100%);
	height: calc(100%);
	display: flex;
	flex-direction: row;
	flex-flow: wrap;
	cursor: text;
	background-color: transparent !important;
}
.multiselect-input input {
	min-width: 1rem;
	width: 0px;
	font-size: var(--fs-small);
	outline: none !important;
	border: none !important;
	padding: 0;
	padding-left: 0.25rem;
	margin: 0.25rem;
	margin-right: 0.25rem;
	margin-top: 0;
}
.multiselect:has(:focus) {
	border-color: var(--clr-accent) !important;
}
.select-selected {
	width: min-content;
	white-space: nowrap;
	text-overflow: ellipse;
}
.multiselect-selected {
	display: flex;
	align-items: center;
	justify-content: center;
	/* border: 0.125rem solid var(--clr-foreground); */
	width: fit-content;
	max-width: 100%;
	height: fit-content;
	background-color: var(--clr-background) !important;
	border-radius: 10px;
	overflow: hidden;
	margin-bottom: 0.25rem;
	margin-right: 0.25rem;
	user-select: none;
	cursor: default;
}
.multiselect-selected small {
	line-height: calc(0.5rem + 1em) !important;
	padding: 0rem 0.4rem;
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}
.multiselect-selected .vr {
	height: calc(var(--fs-small) * 1.75);
	width: 0.0625rem;
	background-color: var(--clr-foreground) !important;
	color: var(--clr-background);
	z-index: 1000000000;
	transform: translateX(-0.0625rem);
	/* border-left: 0.125rem solid var(--clr-background);
	border-top: 100% solid var(--clr-background); */
}
.multiselect-selected button {
	margin: 0;
	/* margin-left: 0.25rem; */
	color: var(--clr-text);
	padding: 0rem 0.4rem;
	padding-right: 0.5rem;
	height: calc(var(--fs-small) * 1.75);
	width: min-content;
	border: none;
	font-size: 0.5rem;
	opacity: 0.75;
}
.multiselect-selected button:hover {
	opacity: 1;
	color: var(--clr-error);
}
.select-dropdown,
.multiselect-dropdown {
	display: flex;
	flex-direction: column;
	position: absolute;
	top: calc(100% + 0.25rem);
	left: 0;
	/* right: 0; */
	width: 100%;
	height: min-content;
	max-height: 10rem;
	overflow-y: auto;
	overflow-x: hidden;
	border-radius: 10px;
	outline: 0.0625rem solid var(--clr-background);
	/* border: 0.125rem solid var(--clr-foreground); */
	padding: 0.25rem;
	z-index: 100000;
	user-select: none;
}
:is(.select-dropdown, .multiselect-dropdown):empty {
	display: none !important;
}
.multiselect:not(:has(input:focus)) .multiselect-dropdown:not(:hover) {
	display: none;
}
:is(.select-dropdown, .multiselect-dropdown).up {
	top: unset;
	bottom: calc(100% + 0.25rem);
}
.select-dropdown {
	width: fit-content;
	max-width: 20rem;
}

.hide {
	display: none;
}
:is(.select-dropdown, .multiselect-dropdown):empty {
	display: none;
}

.select-option,
.multiselect-option {
	/* display: inline-table; or not?? weird height issues without this lmao */
	overflow: hidden;
	padding: 0.25rem 0;
	min-height: 1.5rem;
	/* calc(
		var(--line-height) * 1.25
	); // line height rem bc overflow hidden sets the y to visible which ultimately collapses the div height when unset */
	width: 100%;
	white-space: nowrap;
	text-overflow: ellipsis;
	user-select: none;
	cursor: pointer;
	opacity: 0.75;
}

:is(.select-option, .multiselect-option):hover {
	opacity: 1;
	background-color: #303030 !important;
}
:is(.select, .multiselect) label {
	margin: 0;
}

.dropdown {
	/* height: fit-content; */
	max-height: 100%;
	display: flex;
	flex-direction: column;
	position: relative;
	z-index: 100;
}
.dropdown > summary {
	user-select: none;
}
.dropdown.absolute > div {
	flex: 1;
	overflow-x: hidden;
	overflow-y: hidden;
	position: absolute;
	top: 100%;
	left: 0;
	right: 0;
	height: 1760%;
}

.tab-group {
	height: 100%;
	display: flex;
	flex-direction: column;
}
.tab-header {
	display: flex;
	flex-direction: row;
}
.tab-group > div[id$='content-wrapper'] {
	width: 100%;
	height: 100%;
}

.tab {
	flex: 1;
	/* height: 0px; */
	border: none;
	border-bottom: 0.0625rem solid var(--clr-accent);
	/* border-radius: 10px; */
	border-bottom-left-radius: 0 !important;
	border-bottom-right-radius: 0 !important;
	z-index: 99;
}
.tab:not(:first-of-type) {
	border-left: none;
}
.tab:has(+ .selected) {
	border-right: none;
}
.tab.selected {
	border: 0.0625rem solid var(--clr-accent);
	border-bottom: none;
	color: var(--clr-accent);
	z-index: 100;
}

.tab-content {
	display: none;
	flex: 1;
	height: 0px;
	overflow-y: auto;
	/* border: 0.0625rem solid var(--clr-accent); */
	border-top: none;
	/* padding: 0.25rem; */
	border-bottom-left-radius: 10px;
	border-bottom-right-radius: 10px;
	z-index: 101;
}
.tab-content.selected {
	display: block;
}

div:has(> .room) {
	height: 100%;
}

:is(input, textarea):-internal-autofill-selected {
	background-color: var(--clr-foreground) !important;
}

.room {
	width: 100%;
	height: 100%;
	display: flex;
	flex-direction: column;
	overflow: hidden;
}

.reload {
	background-image: url('/icons/reload');
	background-size: cover;

	filter: drop-shadow(0px 100px 0 var(--clr-foreground));
	transform: translateY(-100px);
	background-color: transparent !important;
}
div:has(> .reload) {
	align-self: flex-end;
	margin-right: 0.5rem;
	cursor: pointer;
}
div:has(> .reload),
.reload {
	width: 1.5rem;
	height: 1.5rem;
}
div:has(> .reload.small),
.reload.small {
	width: 1rem;
	height: 1rem;
}
div:has(> .reload):hover > .reload {
	filter: drop-shadow(0px 100px 0 #323232);
}

.chat-form,
.chat-form > div {
	height: 100%;
	display: flex;
	flex-direction: column;
	margin: 0;
	padding: 0;
}

section[data-title='Chat'] {
	display: flex;
	flex-direction: column;
	/* flex: 1 1; */
	height: 100%;
	overflow: hidden;
}
section[data-title='Chat'] > :first-child {
	flex: 1;
	height: 0px;
	overflow: hidden;
	align-items: flex-end;
}

.active-actors {
	width: min-content;
	max-width: 10rem;
	overflow: hidden;
	padding-bottom: 0.5rem;
}

:is(.active-actors, #selected-from-actor, #selected-to-actor) label {
	overflow: hidden;
	width: 100%;
	min-height: 2rem; /* uhhhhhhhhhhhhhhh */
	padding: 0 0.5rem;
}
.active-actors:nth-of-type(2) label {
	display: flex;
	justify-content: flex-end;
}

:is(.active-actors, #selected-from-actor, #selected-to-actor):nth-of-type(2) {
	direction: rtl;
}
:is(.active-actors, #selected-from-actor, #selected-to-actor):nth-of-type(2)
	> * {
	direction: ltr;
}

:is(.active-actors:hover:nth-of-type(1), .select, .multiselect)
	.actor-portrait {
	margin-right: 0.5rem;
	/* border-right: 0.0625rem solid var(--clr-foreground); */
}
:is(.active-actors:hover:nth-of-type(2), #selected-to-actor) .actor-portrait {
	margin-left: 0.5rem;
	/* border-left: 0.0625rem solid var(--clr-foreground); */
}
:is(.active-actors, #selected-from-actor, #selected-to-actor) .item-link {
	/* flex: 1; */
	white-space: nowrap;
	text-overflow: ellipsis;
	overflow: hidden;
	padding: 0.25rem 0;
}
#selected-from-actor,
#selected-to-actor {
	width: min-content;
}
:is(#selected-from-actor, #selected-to-actor) > label {
	margin: 0;
	padding: 0;
}
:is(#selected-from-actor, #selected-to-actor) .item-link {
	width: min-content;
}

.chat {
	flex: 1;
	padding-top: 0.5rem;
}

.active-actors,
.chat {
	height: 100%;
	max-height: 100%;
	display: flex;
	flex-direction: column;
	overflow-x: hidden;
	overflow-y: auto;
}

:is(.active-actors, .chat) > :first-child {
	margin-top: auto;
}

.item-link {
	width: fit-content;
	cursor: default;
}
.item-link.decorate:hover {
	text-decoration: underline;
}

.active-actors .item-link {
	display: none;
}
.active-actors:hover .item-link {
	display: block;
}

.chat-item:has(input) .item-link {
	cursor: pointer;
}

.item-tooltip {
	display: none;
	width: fit-content;
	position: absolute;
	border: 0.0625rem solid var(--clr-accent);
	border-radius: 0.25rem;
	padding: 0.25rem;
	height: fit-content;
	z-index: 100000;
}

:is(.active-actors, .chat):has(.item-tooltip:hover) .item-tooltip {
	display: block !important;
}

section[data-title='Actors'] {
	overflow-y: hidden;
	height: 100%;
}

section[data-title='Actors'] > div {
	padding: 0.25rem;
}

.actors {
	height: 100%;
	overflow: hidden;
}

.actors-view-container {
	display: flex;
	flex-direction: column;
	height: 100%;
}
.actors-view-buttons {
	display: flex;
}
@media (max-width: 675px) {
	.actors-view-buttons {
		flex-direction: column;
	}
}
.actors-view {
	height: 100%;
	display: grid;
	grid-template-rows: minmax(auto, min-content) 0.0625rem minmax(
			auto,
			min-content
		);

	overflow: hidden;
}
.actors-view > hr {
	background-color: var(--clr-foreground) !important;
	height: 0.125rem;
	width: 100%;
}
:is(.actors-view-actors, .actors-view-actor-groups) {
	display: grid;
	grid-template-columns: repeat(3, 1fr);
	grid-gap: 0.25rem;
	width: 100%;
	overflow-x: hidden;
	overflow-y: auto;
	flex: 1;
	min-height: 0;
}
.actors-view-actors {
	margin-top: 0.5rem;
	margin-bottom: 0.5rem;
}
.actors-view-actor-groups {
	margin-top: 0.5rem;
	padding-bottom: 0.5rem;
}

.actor-view {
	display: flex;
	flex-direction: column;
	overflow-x: hidden;
	overflow-y: auto;
	height: 100%;
}

.actor-view-header {
	align-items: center;
}
.actor-view-header .actor-portrait {
	margin-right: 0.5rem;
}

.actor-item {
	/* width: calc(33% - 0.5rem); */
	height: min-content;
	/* max-width: 33%; */
	padding: 0.25rem;
	white-space: nowrap;
	text-overflow: ellipsis;
	overflow: hidden;
	cursor: pointer;
	border: 0.0625rem solid transparent;
}
.actor-item,
.chat-item {
	display: flex;
	align-items: center;
}
.chat-item {
	margin-top: 0.5rem;
}
.actor-item.viewing-settings {
	border-color: var(--clr-accent);
}
.actor-item * {
	max-width: 100%;
	white-space: normal;
	text-overflow: ellipsis;
	overflow: hidden;
}
.actor-item > *:not(:last-child) {
	margin-bottom: 0.125rem;
}
.actor-item small {
	white-space: nowrap;
	max-width: 80%;
}

:is(.actor-item, .chat-item) input {
	/* display: none; */
	visibility: hidden;
	position: absolute;
}

.actor-portrait {
	width: 2rem;
	min-width: 2rem;
	max-width: 2rem;
	height: 2rem;
	min-height: 2rem;
	max-height: 2rem;
	border-radius: 50%;
	/* background-color: var(--clr-foreground) !important; */
}

:is(.actor-item, .chat-item):has(> input) .actor-portrait {
	cursor: pointer;
}

:is(.actor-item, .chat-item):has(> input:checked) .actor-portrait {
	border: 0.125rem solid var(--clr-accent);
}

.chat-message {
	padding: 0.25rem;
}
article:not([data-title='users']) .chat-message {
	cursor: pointer;
}

.chat-message :is(.chat-timestamp, .chat-message-sender) {
	visibility: hidden;
}
.chat-message:hover :is(.chat-timestamp, .chat-message-sender) {
	visibility: visible;
}

:is(.actor-item, .chat-item:not([data-plain])) {
	opacity: 0.8;
}

:is(.actor-item, .chat-item:not([data-plain])):hover {
	opacity: 1;
}
.chat-message:hover {
	background-color: #202020 !important;
}

.chat-message *:not(.actor-portrait) {
	background-color: transparent !important;
	overflow-wrap: anywhere;
}

.chat-group {
	border-top: 0.0625rem solid var(--clr-foreground);
	position: relative;
	padding-top: 0.5rem;
	margin-top: 0.5rem;
}
.chat-group:nth-last-child(2) {
	padding-bottom: 0.5rem;
}

.chat-group-header {
	position: absolute;
	top: 0;
	left: 50%;
	transform: translate(-50%, -50%);
	padding: 0 0.25rem;
}

.chat-message-actor-name {
	position: relative;
	margin-left: 0.5rem;
	padding-top: 1rem;
	overflow: visible;
	display: flex;
	flex-direction: column;
	justify-content: center;
	cursor: pointer;
}
.chat-message-actor-name::before {
	content: attr(data-selected);
	position: absolute;
	width: fit-content;
	left: 0.1rem;
	top: 0;
	font-size: var(--fs-small);
	color: var(--clr-sys);
	line-height: 1.2;
	overflow-wrap: unset;
	white-space: nowrap;
}
.chat-message-actor-name[data-selected='']::before {
	content: attr(data-date) ' ' attr(data-time);
}
.chat-message:hover .chat-message-actor-name:not([data-selected=''])::before {
	content: attr(data-selected) ' | ' attr(data-date) ' ' attr(data-time);
}

.chat-message-intro {
	line-height: calc(var(--line-height) + 0.25rem);
}

.chat-message-bubble {
	overflow-wrap: anywhere;
	flex: 1;
	background-color: transparent !important;
}

.chat-message-reply {
	width: min-content;
}

#preposition-1,
#preposition-2,
.message-container :is(textarea, input) {
	color: var(--clr-msg-to-send);
}

textarea {
	cursor: text;
}

#selected-from-actor {
	margin-bottom: 0.25rem;
}
#selected-from-actor:not(:empty) {
	margin-right: 0.25rem;
}

#message-intro {
	margin-right: 1ch;
}

#message-intro,
#selected-to-actor,
#selected-to-actor > label {
	height: min-content;
	min-height: unset;
	margin-bottom: 0.11rem;
	align-self: end;
}

select[name='language'] {
	flex: 1;
}

.message-container {
	display: flex;
	flex-direction: column;
	background-color: var(--clr-foreground) !important;
	padding: 0.5rem;
	overflow: hidden;
}

.message-header {
	display: flex;
	flex-direction: row;
	justify-content: flex-start;
	width: 100%;
	margin-bottom: 0.5rem;
	overflow-x: auto;
	overflow-y: hidden;
}

#message-type {
	display: flex;
	align-items: flex-end;
}

.message {
	display: flex;
	flex-direction: row;
}

.message > textarea {
	min-height: 1rem;
	/* height: 1.5rem; */
	max-height: 45vh;
	flex: 1;
	resize: none;
	outline: none;
	border: none;
	overflow-y: hidden;
	margin-top: 0.25rem;
}
/*
	for some reason shows scroll bar on load without doing this even though
	clearing the text should literally produce an identical state to onload
	with the overflow set to auto 🤷🏻‍♂️
*/
.message > textarea[style*='height']:not([style*='height: 0px']) {
	overflow-y: auto;
}

.message > button[type='submit'] {
	width: min-content;
}

section[data-title='settings'] {
	width: 100%;
	height: 100%;
}
section[data-title$=' Settings'] {
	display: inline-table; /* NECESSARY TO ENSURE THE WIDTH GROWS WHEN THE SECTION OVERFLOWS */
	width: 100%;
	height: 100%;
	overflow: auto;
}

.settings {
	min-width: 100%;
	height: 100%;
	margin: 0;
	padding: 0;
	z-index: 0;
}
.settings,
.settings * {
	background-color: transparent !important;
	z-index: 2;
	white-space: nowrap;
}
.settings-object {
	min-width: 100%;
}
.settings *:not(label, label *) {
	cursor: default;
}

.settings :is(.add, .remove) {
	padding: 0 0.5ch;
	display: none;
	color: var(--clr-text);
}
.settings .remove:hover {
	color: var(--clr-error) !important;
}
.settings .remove {
	position: absolute;
	z-index: 10;
	margin-top: 0.2rem;
	left: -1.3ch;
}
.settings .remove.inline {
	position: relative;
	left: 0;
	padding: 0 0.35ch;
	margin: 0 !important;
}
.settings:has(.variable-item > .settings-bracket:hover) .add,
.add:hover {
	color: var(--clr-settings-bracket) !important;
}

.settings .settings-to-default {
	background-image: url('/icons/reload');
	background-size: contain;
	height: 0.75rem;
	width: 0.75rem;
	padding: 0.125rem;
	position: absolute !important;
	display: none;
	left: -2.75ch;
	top: 0.4ch;
	background-color: transparent;
	filter: invert(50%) sepia(50%) hue-rotate(0deg) saturate(3);
	cursor: pointer;
}

.settings
	:is(
		.variable-property:not(:has(.variable-property:hover)):hover > .remove,
		.variable-item:has(> .add):not(:has(.variable-item:hover)):hover > .add,
		.settings-variable:not(:has(.settings-variable:hover)):hover
			.settings-to-default
	) {
	display: inline-block;
}

.settings .settings-for-default {
	position: relative;
}

.variable-property {
	position: relative;
}

.variable-item > .settings-bracket {
	cursor: pointer !important;
}
.settings :is(.add, .remove, .settings-bracket:has(~ .add) > span):hover {
	cursor: pointer !important;
}

.settings-declaration {
	color: var(--clr-settings-declaration);
	overflow-x: auto;
}
.settings-property {
	color: var(--clr-settings-property);
	position: relative;
}
.settings-quote {
	color: var(--clr-settings-quote);
	cursor: text;
}
.settings-string {
	color: var(--clr-settings-text);
	cursor: text;
}
.settings-number {
	color: var(--clr-settings-number);
}
.settings-boolean {
	color: var(--clr-settings-boolean);
}
.settings-bracket {
	color: var(--clr-settings-bracket);
}
.settings-variable {
	color: var(--clr-settings-variable);
}
.settings-special {
	color: var(--clr-settings-special);
}

.settings [style*='--depth'] {
	padding-left: calc(var(--depth) * 1ch);
}
.settings .remove[style*='--depth'] {
	padding-left: 0;
	margin-left: calc(var(--depth) * 1ch);
}

.settings-variable {
	padding-top: 0.125rem;
	min-height: max-content;
}
.settings-variable:has([data-has-error='true'])::after {
	content: '';
	background-color: var(--clr-error-bg) !important;
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	z-index: 0;
}

.settings
	:is(
		.settings-variable,
		.settings-property,
		.variable-item,
		.variable-property
	) {
	padding-bottom: 0.125rem;
}

.settings p {
	white-space: nowrap;
	display: inline-block;
}
.settings label {
	display: inline-block;
	white-space: nowrap;
}
.settings label * {
	white-space: nowrap;
}

.settings :is(div, .settings-object) {
	position: relative;
}
.settings
	:is(div:not(.variable-item, .settings-to-default), .settings-object):not(
		:has(
				:is(
						.settings-object,
						div:not(.variable-item, .settings-to-default)
					):hover
			)
	):hover::before {
	content: '';
	background-color: color-mix(
		in srgb,
		var(--clr-foreground),
		transparent 25%
	) !important;
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	z-index: -1;
}

.settings input {
	padding: 0 !important;
}

.settings-autocomplete:empty {
	display: none;
}

label:has(.settings-text) {
	cursor: text;
}

*:has(> [data-error]) {
	position: relative;
	z-index: 10000;
}

[data-has-error='true'] span:has(> input:not([role$='-slave'])) {
	position: relative;
}
[data-has-error='true'] span:has(> input)::after {
	content: attr(data-value);
	position: absolute;
	top: 0.125rem;
	left: 0;
	right: 0;
	z-index: 100;
	text-decoration: underline wavy var(--clr-error) 0.0625rem;
	color: transparent;
	user-select: none;
}
[data-has-error='true'] span:has(> input[data-type='string'])::after {
	content: '"' attr(data-value) '"';
}

.settings :is(.error-squiggly, .select, .select *) {
	padding: 0 !important;
}

.settings-error {
	margin-left: 1ch;
	--obj-top-offset: 0.25rem;
	position: relative;
	color: var(--clr-error);
	display: inline-flex;
	justify-content: center;
	align-items: center;
}
